* What?

1. =nix-shell= to =ghcHEAD= (or any other compiler of choice) with:
2. https://github.com/hvr/head.hackage patches applied
3. Custom package pins & overrides
4. Nixpkgs pinning

* Quick setup (Nix assumed installed)

  : git clone --recurse-submodules https://github.com/deepfire/nix-head

  ..or, equivalently:

  : git clone https://github.com/deepfire/nix-head
  : ./update-head-hackage.sh

  ..and then:

  : cd nix-head
  : nix-shell --no-build-output --cores 0 -j4

  ..which will give you a shell with =ghcHEAD= and =cabal-install= (by default).

* Quickref

| What                            | How                                                                                           |                                        |
|---------------------------------+-----------------------------------------------------------------------------------------------+----------------------------------------|
| Change Nixpkgs pin              | =./pin-nixpkgs.sh REVISION [GITHUB-USERNAME]=                                                 | =GITHUB-USERNAME= defaults to =NixOS=  |
|---------------------------------+-----------------------------------------------------------------------------------------------+----------------------------------------|
| Different packages in the shell | =nix-shell --arg pkgs '["aeson" "cabal-install"]'=                                            | Defaults to just *cabal-install*.      |
|                                 | ..or edit *default-packages.nix*.                                                             |                                        |
|---------------------------------+-----------------------------------------------------------------------------------------------+----------------------------------------|
| Select a GHC compiler           | =nix-shell --argstr compiler ghc863=                                                          | Defaults to =ghcHEAD=.                 |
|                                 | ..or edit *default-compiler.nix*.                                                             |                                        |
|---------------------------------+-----------------------------------------------------------------------------------------------+----------------------------------------|
| Build a single package          | =./build.sh aeson=                                                                            |                                        |
|---------------------------------+-----------------------------------------------------------------------------------------------+----------------------------------------|
| Set a package pin               | =./pin-package.sh GITHUB-USERNAME HASKELL-REPO [COMMIT-ID]=                                   | =COMMIT-ID= defaults to repo's =HEAD=. |
|                                 | ..when =HASKELL-REPO= is same as =HASKELL-ATTR=,                                              |                                        |
|                                 | otherwise also add a line to =extra-overrides.nix=: =HASKELL-ATTR = { repo = "repo-name"; };= |                                        |
|---------------------------------+-----------------------------------------------------------------------------------------------+----------------------------------------|
| Print effective pin specs       | =nix-shell --arg trace true=                                                                  |                                        |
|---------------------------------+-----------------------------------------------------------------------------------------------+----------------------------------------|

* Setting more overrides

  Haskell derivation overrides other than just =src= attribute, can be
  conveniently specified in =extra-overrides.nix=:

#+BEGIN_SRC nix
{ pin ? false        :: Bool            # Override the repo/commit from pins/${x}.src-json; see ./pin-package.sh
, repo ? attr        :: String          # When repository name != attribute name
, chdir ? null       :: Filepath        # When package's cabal file is in subdir of repository
, revision ? (!pin)  :: Bool            # Set to false to disable edited cabal file & revision
, patch ? null       :: Maybe PatchSpec # Argument to fetchpatch
, jailbreak ? false  :: Bool
, doHaddock ? true   :: Bool
, doCheck ? true     :: Bool
}
#+END_SRC

* Mass rebuild workflow

  This is a workflow optimised for debugging problems of the requested package set:

  1. Edit pins (=./pin-package.sh=, and/or =extra-overrides.nix= edits).

  2. Either =./build.sh= the affected packages for individual builds (failure logs
     saved under =./logs=), or:

  3. =./all-failures.sh=, which will attempt to build all requested packages, but
     won't stop at the first failure -- proceeding until nothing else can be
     built.  This is a batch operation that is intended to give you inputs for
     step #1, so that you can retry efficiently.

* Leveraging as package set supplier for your program

  The Nixpkgs package set provided by this can be leveraged during development of
  another program, where chasing latest GHC is desired for some obscure reason.

  For this:

  1. Fork https://github.com/deepfire/nix-head -- since you'll be adding overrides.
  2. =git clone --recurse-submodules https://github.com/${USER}/nix-head= in your repository.
  3. Use the provided Nixpkgs package set:

     : nixpkgs = import ./nix-head/nixpkgs.nix {};
